C:\Users\User\Desktop\myguide\myguide\settings.py

"""
Django settings for myguide project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4$w6$6i(w0$4b+k-k)y5z-n6r34j#)q7y)@m$7b%1=3d$!#6*n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0', '95.26.175.0']

AUTH_PASSWORD_VALIDATORS = []
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'places',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myguide.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myguide.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGOUT_REDIRECT_URL = '/places/'

C:\Users\User\Desktop\myguide\myguide\urls.py

from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from django.conf import settings
from django.conf.urls.static import static
from places import views as places_views
from django.urls import path
from places import views
from django.contrib.auth.views import PasswordChangeView, PasswordChangeDoneView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', places_views.places, name='home'),  # Перенаправление с корня на places
    path('places/', include('places.urls')),
    path('login/', auth_views.LoginView.as_view(template_name='places/login.html', next_page='places'), name='login'),
    path('logout/', views.logout_view, name='logout'),  # Маршрут для выхода
    path('register/', places_views.register, name='register'),

    path('profile/', views.profile_view, name='profile'),
    path('profile/change-password/', views.change_password, name='change_password'),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

C:\Users\User\Desktop\myguide\places\admin.py

from django.contrib import admin
from .models import Place, Review

class ReviewInline(admin.TabularInline):
    model = Review
    extra = 1

@admin.register(Place)
class PlaceAdmin(admin.ModelAdmin):
    inlines = [ReviewInline]
    list_display = ('title', 'address')
    search_fields = ('title', 'address')

@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    list_display = ('place', 'user', 'rating')
    search_fields = ('place__title', 'user__username')

C:\Users\User\Desktop\myguide\places\apps.py

from django.apps import AppConfig


class PlacesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'places'


C:\Users\User\Desktop\myguide\places\forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import Review
from django.contrib.auth.forms import PasswordChangeForm
from django.utils.translation import gettext as _
from django.core.exceptions import ValidationError

class RegistrationForm(UserCreationForm):
    error_messages = {
        'password_mismatch': _("Два пароля не совпадают."),
    }

    password1 = forms.CharField(
        label=_("Пароль"),
        strip=False,
        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
        help_text=_("Введите пароль (минимум 6 символов)."),
    )
    password2 = forms.CharField(
        label=_("Подтверждение пароля"),
        widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
        strip=False,
        help_text=_("Введите тот же пароль еще раз для проверки."),
    )

    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')

    def clean_password1(self):
        password1 = self.cleaned_data.get("password1")
        if len(password1) < 6:
            raise ValidationError(_("Пароль должен содержать минимум 6 символов."))
        return password1
    
class ReviewForm(forms.ModelForm):
    class Meta:
        model = Review
        fields = ['text', 'rating']
        widgets = {
            'text': forms.Textarea(attrs={'rows': 4}),
            'rating': forms.Select(),
        }

class CustomPasswordChangeForm(PasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['old_password'].widget.attrs.update({'placeholder': 'Старый пароль'})
        self.fields['new_password1'].widget.attrs.update({'placeholder': 'Новый пароль'})
        self.fields['new_password2'].widget.attrs.update({'placeholder': 'Подтверждение нового пароля'})

    class Meta:
        fields = ['old_password', 'new_password1', 'new_password2']


C:\Users\User\Desktop\myguide\places\models.py

from django.db import models
from django.contrib.auth.models import User
from django.db.models import Avg

class Place(models.Model):
    CATEGORY_CHOICES = [
        ('cafe', 'Кафе'),
        ('restaurant', 'Ресторан'),
        ('other', 'Другое'),
    ]

    title = models.CharField(max_length=200)
    address = models.CharField(max_length=200)
    description = models.TextField()
    image = models.ImageField(upload_to='places/', blank=True, null=True)
    category = models.CharField(
        max_length=20,
        choices=CATEGORY_CHOICES,
        default='other'
    )  # Новое поле для категории
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    def average_rating(self):
        return self.reviews.all().aggregate(Avg('rating'))['rating__avg'] or 0

class Review(models.Model):
    place = models.ForeignKey(Place, on_delete=models.CASCADE, related_name='reviews')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.user.username} for {self.place.title}"

C:\Users\User\Desktop\myguide\places\urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('check-username/', views.check_username, name='check_username'),

    path('', views.places, name='places'),  # Главная страница приложения 
    path('<int:place_id>/', views.place_detail, name='place_detail'),
    path('<int:place_id>/add_review/', views.add_review, name='add_review'),

    path('search/', views.search_places, name='search_places'),  # Новый маршрут для поиска

    path('profile/delete/', views.delete_account, name='delete_account'),
]


C:\Users\User\Desktop\myguide\places\views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Place, Review
from .forms import RegistrationForm, ReviewForm
from django.contrib import messages
from django.contrib.auth import login, authenticate
from django.core.paginator import Paginator
from django.contrib.auth.models import User
from django.http import JsonResponse
from django.contrib.auth import logout
from .forms import ReviewForm
from .forms import CustomPasswordChangeForm
from django.db.models import Q
from django.contrib.auth import update_session_auth_hash


def check_username(request):
    username = request.GET.get('username', None)
    if username:
        exists = User.objects.filter(username=username).exists()
        return JsonResponse({'exists': exists})
    return JsonResponse({'exists': False})

def places(request):
    query = request.GET.get('q')  # Получаем параметр поиска из URL
    category = request.GET.get('category')  # Получаем параметр категории

    # Фильтрация мест
    if query:
        all_places = Place.objects.filter(
            Q(title__icontains=query) | Q(address__icontains=query)
        )  # Ищем совпадения в названии или адресе
    elif category:
        all_places = Place.objects.filter(category=category)  # Фильтруем по категории
    else:
        all_places = Place.objects.all()  # Если нет поиска и категории, показываем все места

    paginator = Paginator(all_places, 6)  # 6 мест на страницу
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'places/places.html', {'page_obj': page_obj, 'current_category': category, 'query': query})

def place_detail(request, place_id):
    place = get_object_or_404(Place, id=place_id)
    if request.method == 'POST' and request.user.is_authenticated:
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.place = place
            review.user = request.user
            review.save()
            return redirect('place_detail', place_id=place.id)
    else:
        form = ReviewForm()

    return render(request, 'places/place_detail.html', {
        'place': place,
        'review_form': form,
    })

def search_places(request):
    query = request.GET.get('q', '')
    if query:
        places = Place.objects.filter(
            Q(title__icontains=query) | Q(address__icontains=query)
        ).values('id', 'title', 'address')[:10]  # Ограничиваем количество результатов до 10
        results = list(places)
    else:
        results = []
    return JsonResponse(results, safe=False)

@login_required
def add_review(request, place_id):
    place = get_object_or_404(Place, pk=place_id)
    
    if request.method == 'POST':
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.place = place
            review.user = request.user
            review.save()
            messages.success(request, 'Ваш отзыв успешно добавлен!')
            return redirect('place_detail', place_id=place_id)
    
    return redirect('place_detail', place_id=place_id)

def profile_view(request):
    return render(request, 'places/profile.html', {'user': request.user})

def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=password)
            login(request, user)
            messages.success(request, f'Аккаунт {username} успешно создан!')
            return redirect('places')
    else:
        form = RegistrationForm()
    return render(request, 'places/register.html', {'form': form})

def logout_view(request):
    logout(request)  # Завершаем сессию пользователя
    return redirect('places')  # Перенаправляем на главную страницу после выхода

def change_password(request):
    if request.method == 'POST':
        form = CustomPasswordChangeForm(user=request.user, data=request.POST)
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, form.user)
            return redirect('profile')  # Перенаправление после успешного изменения пароля
    else:
        form = CustomPasswordChangeForm(user=request.user)

    return render(request, 'places/change_password.html', {'form': form})

def delete_account(request):
    if request.method == 'POST':
        user = request.user
        logout(request)  # Выходим из учетной записи
        user.delete()  # Удаляем пользователя из базы данных
        messages.success(request, 'Ваш аккаунт был успешно удален.')
        return redirect('places')  # Перенаправляем на главную страницу
    return render(request, 'places/delete_account.html')

def places(request):
    all_places = Place.objects.all()
    paginator = Paginator(all_places, 6)  # 6 мест на страницу
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'places/places.html', {'page_obj': page_obj})

C:\Users\User\Desktop\myguide\places\templates\places\register.html

<!DOCTYPE html>
<html lang="ru">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Гид по местам | Регистрация</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@6.9.96/css/materialdesignicons.min.css">
  <style>
    :root {
      --primary-color: #4fe992; /* Основной зеленый цвет */
      --secondary-color: #3a9461; /* Темный зеленый цвет */
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      background-color: #f8f9fa;
      align-items: center;
      justify-content: center;
      padding-top: 70px;
      padding-bottom: 50px;
    }

    .header {
      background: var(--primary-color); /* Сплошной зеленый цвет */
      color: white;
      padding: 15px 0;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 100;
    }

    .logo {
      font-weight: 700;
      font-size: 1.5rem;
    }

    .register-container {
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
      padding: 30px;
      width: 400px;
      text-align: center;
    }

    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }

    .form-group label {
      font-weight: 500;
      display: block;
      margin-bottom: 8px; /* Увеличил отступ */
      color: #333;
    }

    .form-control {
      border-radius: 5px;
      padding: 12px 15px;
      border: 1px solid #ddd;
      width: 100%;
      box-sizing: border-box;
      font-size: 16px;
      transition: border-color 0.3s;
    }

    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
    }

    .btn-primary {
      background: var(--primary-color);
      border: none;
      border-radius: 5px;
      padding: 12px 25px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      width: 100%;
      font-size: 16px;
      font-weight: 500;
    }

    .btn-primary:hover {
      background-color: var(--secondary-color);
    }

    .footer {
      background: #4fe992; /* Задаем фоновый цвет */
      color: white;
      text-align: center;
      padding: 15px 0;
      width: 100%;
      position: fixed;
      bottom: 0;
    }

    .password-container {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      color: #999;
      font-size: 18px;
    }

    .error-message {
      font-size: 0.875rem;
      margin-top: 5px;
      color: #dc3545;
    }
  </style>
</head>

<body>
  <header class="header">
    <div class="container d-flex justify-content-center align-items-center">
        <a href="{% url 'places' %}" class="text-white text-decoration-none logo">
            <i class="mdi mdi-map-marker-radius"></i> My Guide
        </a>
    </div>
  </header>

  <div class="register-container">
    <h2>Регистрация</h2>
    <form method="post">
      {% csrf_token %}
      <div class="form-group">
          <label for="{{ form.username.id_for_label }}">Имя пользователя</label>
          <input type="text" class="form-control" id="id_username" name="username" placeholder="Введите имя пользователя" required>
          <div class="error-message" id="id_username-error"></div>
      </div>
      <div class="form-group">
          <label for="{{ form.email.id_for_label }}">Email</label>
          <input type="email" class="form-control" id="id_email" name="email" placeholder="Введите email" required>
          <div class="error-message" id="id_email-error"></div>
      </div>
      <div class="form-group">
          <label for="{{ form.password1.id_for_label }}">Пароль</label>
          <div class="password-container">
              <input type="password" class="form-control" id="id_password1" name="password1" placeholder="Введите пароль" required>
              <span class="password-toggle" onclick="togglePasswordVisibility('id_password1')">
                  <i class="fa fa-eye"></i>
              </span>
          </div>
          <div class="error-message" id="id_password1-error"></div>
      </div>
      <div class="form-group">
          <label for="{{ form.password2.id_for_label }}">Подтверждение пароля</label>
          <div class="password-container">
              <input type="password" class="form-control" id="id_password2" name="password2" placeholder="Повторите пароль" required>
              <span class="password-toggle" onclick="togglePasswordVisibility('id_password2')">
                  <i class="fa fa-eye"></i>
              </span>
          </div>
          <div class="error-message" id="id_password2-error"></div>
      </div>
      <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
    </form>
  </div>

  <footer class="footer">
    © 2025 Разработано на Django
  </footer>

  <script>
    function togglePasswordVisibility(fieldId) {
      const passwordInput = document.getElementById(fieldId);
      const passwordToggle = document.querySelector(`#${fieldId} + .password-toggle i`);
      if (passwordInput.type === "password") {
        passwordInput.type = "text";
        passwordToggle.classList.remove("fa-eye");
        passwordToggle.classList.add("fa-eye-slash");
      } else {
        passwordInput.type = "password";
        passwordToggle.classList.remove("fa-eye-slash");
        passwordToggle.classList.add("fa-eye");
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
    const password1Input = document.getElementById('id_password1');
    const password2Input = document.getElementById('id_password2');
    const password1Error = document.getElementById('id_password1-error');
    const password2Error = document.getElementById('id_password2-error');

    // Проверка первого пароля
    password1Input?.addEventListener('input', () => {
        if (password1Input.value.length < 6) {
            password1Error.textContent = 'Пароль должен быть минимум 6 символов.';
        } else {
            password1Error.textContent = '';
        }
        // Проверка совпадения паролей
        if (password2Input.value && password1Input.value !== password2Input.value) {
            password2Error.textContent = 'Пароли не совпадают.';
        } else {
            password2Error.textContent = '';
        }
    });

    // Проверка второго пароля
    password2Input?.addEventListener('input', () => {
        if (password1Input.value !== password2Input.value) {
            password2Error.textContent = 'Пароли не совпадают.';
        } else {
            password2Error.textContent = '';
        }
    });
});
  </script>
</body>
</html>

C:\Users\User\Desktop\myguide\places\templates\places\profile.html

{% extends 'places/base.html' %}
{% block title %}Профиль пользователя{% endblock %}
{% block content %}
<div class="container py-5">
    <div class="row">
        <div class="col-md-6">
            <h1>Профиль пользователя</h1>
            <p><strong>Имя пользователя:</strong> {{ user.username }}</p>
            <p><strong>Email:</strong> {{ user.email }}</p>
            <div class="mt-4 d-flex justify-content-start">
                <a href="{% url 'logout' %}" class="btn btn-danger me-2">Выйти</a>
                <a href="{% url 'change_password' %}" class="btn btn-secondary">Изменить пароль</a>
                <a href="{% url 'delete_account' %}" class="btn btn-danger ms-2">Удалить аккаунт</a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

C:\Users\User\Desktop\myguide\places\templates\places\places.html

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Гид по местам | Найди лучшие места в городе{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.9.96/css/materialdesignicons.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4fe992; /* Основной зеленый цвет */
            --secondary-color: #3a9461; /* Темный зеленый цвет */
            --primary-gradient: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: #f8f9fa;
        }

        /* Новый стиль для блока с текстом */
        .intro-section {
            background-color: #e8f5e9; /* Светло-зеленый фон */
            padding: 20px;
            border-radius: 10px; /* Закругленные углы */
            text-align: center; /* Центрирование текста */
            margin-top: 20px; /* Отступ сверху */
            margin-bottom: 20px; /* Отступ снизу */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Легкая тень для объема */
        }

        /* Main content */
        .main-content {
            flex: 1;
            padding: 20px;
            max-width: 500px; /* Ограничиваем ширину контента */
        }

        /* Header styles */
        .header {
            background: #4fe992; /* Зеленый фон */
            color: white;
            padding: 10px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 100%;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 100;
        }

        /* Логотип */
        .logo {
            position: absolute;
            left: 300px;  /* твое название двигается тут */
            top: 50%;
            transform: translateY(-50%);
            font-weight: 700;
            font-size: 1.5rem;
        }

        /* Поисковая строка */
        .search-bar {
            margin-left: 300px;
            width: 500px;
            border: none;
            outline: none;
            border-radius: 20px;
            padding: 10px;
            font-size: 16px;
        }
        .search-icon {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #000;
        }

        /* Категории */
        .categories {
            display: flex;
            gap: 10px;
            color: white; /* Цвет текста категорий */
        }
        .category-link {
            color: white; /* Цвет ссылок категорий */
            text-decoration: none;
            transition: color 0.3s ease;
        }
        .category-link:hover {
            color: #000; /* Цвет ссылок при наведении */
        }

        .category-link.active {
            color: black; /* Цвет активной категории */
            font-weight: bold;
        }

        /* Плашка пользователя */
        .user-menu {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 20px; /* Позиционирование в правом верхнем углу */
        }
        .user-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.9);
            color: var(--primary-color);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .user-icon:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        }
        .user-dropdown {
            position: absolute;
            top: 50px;
            right: 0;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            display: none;
        }
        .user-dropdown.show {
            display: block;
        }
        .user-dropdown a {
            display: block;
            padding: 10px 15px;
            color: #333;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        .user-dropdown a:hover {
            background-color: #f0f0f0;
        }

        .user-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: white;
            color: var(--primary-color);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .user-icon:hover {
            transform: scale(1.05);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
        }

        /* Main content */
        .main-content {
            flex: 1;
            padding: 20px;
        }

        /* Footer styles */
        .footer {
            background: #4fe992; /* Задаем фоновый цвет */
            color: white;
            text-align: center;
            padding: 10px 0;
            box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
        }

        /* Place card styles */
        .place-card {
            border: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
        }

        .place-card:hover {
            transform: translateY(-5px);
        }

        .place-card-img {
            height: 200px;
            object-fit: cover;
        }

        .place-card-body {
            padding: 15px;
        }

        .place-card-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }

        .place-card-text {
            color: #555;
        }

        .star-rating {
            color: gold;
        }

        /* Gradient button */
        .gradient-button {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .gradient-button:hover {
            background: linear-gradient(to right, #6eeea6, #3a9461); /* Darker gradient on hover */
        }

        /* Кнопки */
        .btn-primary {
            background-color: #4fe992; /* Зеленый цвет */
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: darken(#2E7D32, 10%); /* Темнее при наведении */
        }
        .btn-outline-light {
            color: #94edbb; /* Зеленый цвет */
            border-color: #94edbb;
            transition: background-color 0.3s ease;
        }
        .btn-outline-light:hover {
            background-color: #008000; /* Темно-зеленый цвет при наведении */
        }

    </style>
</head>

<body>
    <!-- HEADER - Used on all pages -->
    <header class="header">
        <div class="container d-flex justify-content-between align-items-center">
            <!-- Логотип -->
            <a href="{% url 'places' %}" class="text-white text-decoration-none logo">
                My Guide
            </a>
            <!-- Поисковая строка -->
            <form method="get" action="{% url 'places' %}">
                <input type="text" name="q" placeholder="Поиск..." class="search-bar" value="{{ query|default_if_none:'' }}">
                <!-- <button type="submit" class="search-icon"><i class="mdi mdi-magnify"></i></button> -->
            </form>

            <!-- Категории -->
            <div class="categories d-flex align-items-center">
                <a href="{% url 'places' %}?category=cafe" class="category-link {% if current_category == 'cafe' %}active{% endif %}">
                    Кафе
                </a>
                <a href="{% url 'places' %}?category=restaurant" class="category-link {% if current_category == 'restaurant' %}active{% endif %}">
                    Рестораны
                </a>
                <!-- Кнопка "Сбросить фильтр" -->
                <a href="{% url 'places' %}" class="btn btn-outline-secondary ms-3">Сбросить фильтр</a>
            </div>
            <!-- Плашка пользователя -->
            <div class="user-menu">
                {% if user.is_authenticated %}
                    <!-- Выпадающее меню для авторизованных пользователей -->
                    <div class="user-icon" id="userIcon">
                        <i class="mdi mdi-account-circle mdi-24px"></i>
                    </div>
                    <div id="userDropdown" class="user-dropdown">
                        <a href="{% url 'profile' %}">Профиль</a>
                        <a href="{% url 'logout' %}">Выход</a>
                    </div>
                {% else %}
                    <!-- Кнопка входа для неавторизованных пользователей -->
                    <div>
                        <a href="{% url 'login' %}" class="btn btn-outline-light">Войти</a>
                        <a href="{% url 'register' %}" class="btn btn-primary ms-2">Зарегистрироваться</a>
                    </div>
                {% endif %}
            </div>
        </div>
    </header>

    <!-- MAIN CONTENT - Places List (Home Page) -->
    <main class="container py-5">
        {% block content %}
        <h1 class="mb-4 fw-bold">Лучшие места в города</h1>
        {% if query %}
        <p class="lead mb-4">Результаты поиска: "{{ query }}"</p>
        {% else %}
        <p class="lead mb-4">Исследуйте самые популярные заведения, оставляйте отзывы и делитесь впечатлениями!</p>
        {% endif %}
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {% for place in page_obj %}
            <div class="col">
                <div class="card place-card">
                    <img src="{{ place.image.url }}" class="card-img-top" alt="{{ place.title }}">
                    <div class="card-body">
                        <h5 class="card-title">{{ place.title }}</h5>
                        <p class="card-text text-muted">
                            <i class="mdi mdi-map-marker"></i> {{ place.address }}
                        </p>
                        <div class="d-flex mb-3 align-items-center">
                            <div class="rating me-2">
                                {% for i in "12345" %}
                                    {% if i <= place.average_rating|floatformat:0 %}
                                        <i class="mdi mdi-star"></i>
                                    {% else %}
                                        <i class="mdi mdi-star-outline"></i>
                                    {% endif %}
                                {% endfor %}
                            </div>
                            <span>{{ place.average_rating }} ({{ place.reviews.count }} отзывов)</span>
                        </div>
                        <p class="card-text mb-3">{{ place.description }}</p>
                        <a href="{% url 'place_detail' place.id %}" class="btn btn-primary">Подробнее</a>
                    </div>
                </div>
            </div>
            {% empty %}
            <div class="col-12">
                <p>Места не найдены.</p>
            </div>
            {% endfor %}
        </div>
        <!-- Add some margin between cards and pagination -->
        <div class="mt-5"></div>
        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <!-- Кнопка "Назад" -->
                {% if page_obj.has_previous %}
                    <li class="page-item">
                        <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page=1">Первая</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page={{ page_obj.previous_page_number }}">Назад</a>
                    </li>
                {% endif %}

                <!-- Номера страниц -->
                {% for i in page_obj.paginator.page_range %}
                    {% if page_obj.number == i %}
                        <li class="page-item active" aria-current="page">
                            <span class="page-link">{{ i }}</span>
                        </li>
                    {% elif i > page_obj.number|add:'-3' and i < page_obj.number|add:'3' %}
                        <li class="page-item">
                            <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page={{ i }}">{{ i }}</a>
                        </li>
                    {% elif forloop.first %}
                        <li class="page-item">
                            <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page=1">1</a>
                        </li>
                    {% elif forloop.last %}
                        <li class="page-item">
                            <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page={{ page_obj.paginator.num_pages }}">{{ page_obj.paginator.num_pages }}</a>
                        </li>
                    {% endif %}
                {% endfor %}

                <!-- Кнопка "Вперед" -->
                {% if page_obj.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page={{ page_obj.next_page_number }}">Вперед</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?{% if request.GET.q %}q={{ request.GET.q }}&{% endif %}page={{ page_obj.paginator.num_pages }}">Последняя</a>
                    </li>
                {% endif %}
            </ul>
        </nav>
        {% endblock %}
    </main>

    <!-- FOOTER - Used on all pages -->
    <footer class="footer">
        <div class="container">
            &copy; 2025 Django
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Элементы для выпадающего меню пользователя
            const userIcon = document.getElementById('userIcon');
            const userDropdown = document.getElementById('userDropdown');
        
            // Элементы для поиска
            const searchInput = document.getElementById('search-input');
            const searchResults = document.getElementById('search-results');
        
            // Логика для выпадающего меню пользователя
            if (userIcon && userDropdown) {
                // Открытие/закрытие выпадающего меню
                userIcon.addEventListener('click', () => {
                    userDropdown.classList.toggle('show'); // Добавляем/удаляем класс show
                });
        
                // Закрытие меню при клике вне его области
                document.addEventListener('click', (event) => {
                    if (!userIcon.contains(event.target) && !userDropdown.contains(event.target)) {
                        userDropdown.classList.remove('show'); // Скрываем меню
                    }
                });
            }
        
            // Логика для поиска
            if (searchInput && searchResults) {
                // Отправка AJAX-запроса при изменении текста
                searchInput.addEventListener('input', () => {
                    const query = searchInput.value.trim();
                    if (query.length > 0) {
                        fetch(`/places/search/?q=${encodeURIComponent(query)}`)
                            .then(response => response.json())
                            .then(data => {
                                searchResults.innerHTML = ''; // Очищаем предыдущие результаты
                                if (data.length > 0) {
                                    data.forEach(place => {
                                        const link = document.createElement('a');
                                        link.href = `/places/${place.id}/`;
                                        link.textContent = place.title;
                                        searchResults.appendChild(link);
                                    });
                                    searchResults.style.display = 'block'; // Показываем результаты
                                } else {
                                    searchResults.style.display = 'none'; // Скрываем, если результатов нет
                                }
                            });
                    } else {
                        searchResults.style.display = 'none'; // Скрываем, если поле пустое
                    }
                });
        
                // Скрытие результатов при клике вне поля поиска
                document.addEventListener('click', (event) => {
                    if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
                        searchResults.style.display = 'none';
                    }
                });
            }
        });
        </script>
    {% block scripts %}
    {% endblock %}
</body>

</html>

C:\Users\User\Desktop\myguide\places\templates\places\place_detail.html

{% extends 'places/base.html' %}
{% block title %}Место: {{ place.title }}{% endblock %}
{% block content %}

<div class="container py-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <a href="{% url 'places' %}" class="btn btn-outline-primary mb-3">
                <i class="mdi mdi-arrow-left"></i> Назад к списку
            </a>
            <!-- Place Details -->
            <h1 class="mb-3 fw-bold">{{ place.title }}</h1>
            <p class="text-muted">
                <i class="mdi mdi-map-marker"></i> {{ place.address }}
            </p>
            <div class="d-flex mb-3 align-items-center">
                <div class="rating me-2">
                    {% for i in "12345" %}
                        {% if i <= place.average_rating|floatformat:0 %}
                            <i class="mdi mdi-star"></i>
                        {% else %}
                            <i class="mdi mdi-star-outline"></i>
                        {% endif %}
                    {% endfor %}
                </div>
                <span>{{ place.average_rating|floatformat:1 }} ({{ place.reviews.count }} отзывов)</span>
            </div>
            <img src="{{ place.image.url }}" alt="{{ place.title }}" class="img-fluid rounded mb-4">
            <p class="lead">{{ place.description }}</p>
            
            <!-- Comment Section -->
            <h4 class="mt-5 mb-3 fw-bold">Отзывы</h4>
            {% for review in place.reviews.all %}
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">{{ review.user.username }}</h5>
                    <p class="card-text">{{ review.text }}</p>
                    <div class="star-rating mb-2">
                        {% for i in "12345" %}
                            {% if i|add:0 <= review.rating %}
                                <i class="mdi mdi-star text-warning"></i>
                            {% else %}
                                <i class="mdi mdi-star-outline text-warning"></i>
                            {% endif %}
                        {% endfor %}
                    </div>
                    <small class="text-muted">{{ review.created_at|date:"F Y" }}</small>
                </div>
            </div>
            {% endfor %}
            
            <!-- Comment Form -->
            {% if user.is_authenticated %}
            <div class="comment-form mt-5">
                <h5 class="mb-3 fw-bold">Оставить отзыв</h5>
                <form method="post">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label class="form-label fw-bold">Текст отзыва:</label>
                        <textarea name="text" class="form-control" rows="4" required id="id_text" style="resize: none;"></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="form-label fw-bold">Рейтинг:</label>
                        <div class="star-rating-form">
                            {% for i in "54321" %}
                                <input type="radio" id="star{{i}}" name="rating" value="{{i}}" {% if review_form.rating.value == i %}checked{% endif %}>
                                <label for="star{{i}}"><i class="mdi mdi-star{% if review_form.rating.value != i %}-outline{% endif %}"></i></label>
                            {% endfor %}
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Отправить отзыв</button>
                </form>
            </div>
            {% else %}
            <p>Чтобы оставить отзыв, пожалуйста, <a href="{% url 'login' %}">войдите</a>.</p>
            {% endif %}
        </div>
    </div>
</div>

<style>
    /* Стили для звезд в отзывах */
    .star-rating {
        font-size: 1.5rem;
        letter-spacing: 2px;
    }
    
    .star-rating i {
        color: #ffc107;
    }
    
    /* Стили для звезд в форме */
    .star-rating-form {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
        font-size: 1.5rem;
        letter-spacing: 2px;
    }
    
    .star-rating-form input {
        display: none;
    }
    
    .star-rating-form label {
        color: #ddd;
        cursor: pointer;
        margin-right: 5px;
    }
    
    .star-rating-form input:checked ~ label {
        color: #ffc107;
    }
    
    .star-rating-form label:hover,
    .star-rating-form label:hover ~ label {
        color: #ffc107;
    }
    
    /* Стили для карточек отзывов */
    .card {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: none;
    }
    
    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
    }
    
    .card-text {
        margin: 10px 0;
    }
    
    .text-muted {
        font-size: 0.9rem;
    }
</style>

<script>
    // JavaScript для интерактивных звезд
    document.addEventListener('DOMContentLoaded', function() {
        const stars = document.querySelectorAll('.star-rating-form input');
        stars.forEach(star => {
            star.addEventListener('change', function() {
                const rating = this.value;
                const labels = document.querySelectorAll('.star-rating-form label i');
                labels.forEach((label, index) => {
                    if (5 - index <= rating) {
                        label.classList.remove('mdi-star-outline');
                        label.classList.add('mdi-star');
                    } else {
                        label.classList.remove('mdi-star');
                        label.classList.add('mdi-star-outline');
                    }
                });
            });
        });
    });
</script>
{% endblock %}

C:\Users\User\Desktop\myguide\places\templates\places\models.html

from django.db import models
from django.contrib.auth.models import User

class Place(models.Model):
    title = models.CharField(max_length=255)
    address = models.CharField(max_length=255)
    description = models.TextField()
    image = models.ImageField(upload_to='places/')
    average_rating = models.FloatField(default=0)

class Review(models.Model):
    place = models.ForeignKey(Place, related_name='reviews', on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    rating = models.PositiveIntegerField(choices=[(i, i) for i in range(1, 6)])
    created_at = models.DateTimeField(auto_now_add=True)

C:\Users\User\Desktop\myguide\places\templates\places\login.html

<!DOCTYPE html>
<html lang="ru">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}Гид по местам | Найди лучшие места в городе{% endblock %}</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@6.9.96/css/materialdesignicons.min.css">
  <style>
    :root {
      --primary-color: #4fe992; /* Основной зеленый цвет */
      --secondary-color: #3a9461; /* Темный зеленый цвет */
      --primary-gradient: linear-gradient(to right, var(--primary-color), var(--secondary-color));
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      background-color: #f8f9fa;
      align-items: center;
      justify-content: center;
    }

    .header {
      background: #4fe992; /* Вместо var(--primary-gradient) */
      color: white;
      padding: 15px 0;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 100;
    }

    .header .nav-link {
      color: rgba(255, 255, 255, 0.85);
      transition: all 0.3s ease;
      font-weight: 500;
    }

    .header .nav-link:hover {
      color: white;
      transform: translateY(-2px);
    }

    .logo {
      font-weight: 700;
      font-size: 1.5rem;
    }

    .user-menu {
      position: relative;
    }

    .user-icon {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: rgba(255, 255, 255, 0.9);
      color: var(--primary-color);
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .user-icon:hover {
      transform: scale(1.05);
      box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
    }

    .login-container {
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
      padding: 30px;
      width: 400px;
      text-align: center;
    }

    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }

    .form-group label {
      font-weight: 500;
      display: block;
      margin-bottom: 5px;
    }

    .form-control {
      border-radius: 7px;
      padding: 12px 15px;
      border: 1px solid #ddd;
      width: 100%;
      box-sizing: border-box;
    }

    .btn-primary {
      background: #4fe992; /* Вместо var(--primary-gradient) */
      border: none;
      border-radius: 7px;
      padding: 12px 25px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      width: 100%;
      color: white;
    }

    .btn-primary:hover {
      background-color: #3a9461; /* Темно-зеленый при наведении */
    }

    .register-link {
      margin-top: 20px;
      color: var(--primary-color);
      text-decoration: none;
      display: inline-block;
    }

    .register-link:hover {
      text-decoration: underline;
    }

    .footer {
      background: #4fe992; /* Задаем фоновый цвет */
      color: white;
      text-align: center;
      padding: 15px 0;
      width: 100%;
      position: fixed;
      bottom: 0;
    }

    .password-container {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      color: #999;
    }

    .checkbox-container {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
    }

    .checkbox-container input[type="checkbox"] {
      margin-right: 10px;
    }
  </style>
</head>

<body>
  <header class="header">
    <div class="container d-flex justify-content-center align-items-center">
        <a href="{% url 'places' %}" class="text-white text-decoration-none logo">
            <i class="mdi mdi-map-marker-radius"></i> My Guide
        </a>
    </div>
  </header>

  <div class="login-container">
    <h2>Вход</h2>
    <form method="post">
      {% csrf_token %}
      <div class="form-group">
        <label for="id_username">Имя пользователя</label>
        <input type="text" class="form-control" id="id_username" name="username" placeholder="Введите имя пользователя" required>
        <div class="error-message text-danger" id="username-error"></div>
      </div>
      <div class="password-container">
        <input type="password" class="form-control" id="id_password" name="password" placeholder="Введите пароль" required>
        <span class="password-toggle" onclick="togglePasswordVisibility('id_password')">
            <i class="fa fa-eye"></i>
        </span>
      </div>
      <div class="checkbox-container">
        <input type="checkbox" id="robot" name="robot" required>
        <label for="robot">Я не робот</label>
      </div>
      <button type="submit" class="btn btn-primary">Войти</button>
    </form>
    <!-- Исправленная ссылка на регистрацию -->
    <a href="{% url 'register' %}" class="register-link">Зарегистрироваться</a>
  </div>

  <footer class="footer">
    © 2025 Разработано на Django
  </footer>

  <script>
    function togglePasswordVisibility(fieldId) {
        const passwordInput = document.getElementById(fieldId);
        const passwordToggle = document.querySelector(`[for='${fieldId}'] + .password-container .password-toggle i`);
        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            passwordToggle.classList.remove("fa-eye");
            passwordToggle.classList.add("fa-eye-slash");
        } else {
            passwordInput.type = "password";
            passwordToggle.classList.remove("fa-eye-slash");
            passwordToggle.classList.add("fa-eye");
        }
    }
  </script>
</body>
</html>

C:\Users\User\Desktop\myguide\places\templates\places\delete_account.html

{% extends 'places/base.html' %}
{% block title %}Удалить аккаунт{% endblock %}
{% block content %}
<div class="container py-5">
    <h1>Удалить аккаунт</h1>
    <p>Вы уверены, что хотите удалить свой аккаунт? Это действие нельзя отменить.</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Да, удалить аккаунт</button>
        <a href="{% url 'profile' %}" class="btn btn-secondary">Отмена</a>
    </form>
</div>
{% endblock %}

C:\Users\User\Desktop\myguide\places\templates\places\change_password.html

{% extends 'places/base.html' %}
{% block title %}Изменение пароля{% endblock %}
{% block content %}
<div class="container py-5">
    <h2>Изменение пароля</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Изменить пароль</button>
    </form>
</div>
{% endblock %}

C:\Users\User\Desktop\myguide\places\templates\places\base.html

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Гид по местам | Найди лучшие места в городе{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@6.9.96/css/materialdesignicons.min.css">
    <style>
        :root {
            --primary-color: #4fe992; /* Основной зеленый цвет */
            --secondary-color: #3a9461; /* Темный зеленый цвет */
            --primary-gradient: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: #f8f9fa;
        }

        /* Main content */
        .main-content {
            flex: 1;
            padding: 20px;
            max-width: 1800px; /* Ограничиваем ширину контента */
        }

        /* Header styles */
        .header {
            background: #4fe992; /* Зеленый фон */
            color: white;
            padding: 10px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 100%;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 100;
        }

        /* Логотип */
        .logo {
            position: absolute;
            left: 260px;
            top: 50%;
            transform: translateY(-50%);
            font-weight: 700;
            font-size: 1.5rem;
        }

        /* Поисковая строка */
        .search-bar {
            margin-left: 580px;
            width: 500px;
            border: none;
            outline: none;
            border-radius: 20px;
            padding: 10px;
            font-size: 16px;
        }
        .search-icon {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #000;
        }

            /* Стили для контейнера результатов поиска */
        .search-results {
            position: absolute;
            top: 50px; /* Под полем поиска */
            left: 0;
            width: 300px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            display: none;
            max-height: 300px;
            overflow-y: auto;
        }
        .search-results a {
            display: block;
            padding: 10px;
            text-decoration: none;
            color: #333;
            transition: background-color 0.3s ease;
        }
        .search-results a:hover {
            background-color: #f0f0f0;
        }

        /* Стили для профиля */
        .profile-container {
            margin-top: 50px; /* Отступ сверху */
        }

        .profile-container .user-info {
            margin-bottom: 20px; /* Отступ между информацией о пользователе и кнопками */
        }

        .profile-container .btn-group {
            display: flex;
            gap: 10px; /* Расстояние между кнопками */
        }

        /* Категории */
        .categories {
            display: flex;
            gap: 10px;
            color: white; /* Цвет текста категорий */
        }
        .category-link {
            color: white; /* Цвет ссылок категорий */
            text-decoration: none;
            transition: color 0.3s ease;
        }
        .category-link:hover {
            color: #000; /* Цвет ссылок при наведении */
        }

        /* Плашка пользователя */
        .user-menu {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 20px; /* Позиционирование в правом верхнем углу */
        }

        .user-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.9);
            color: var(--primary-color);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .user-icon:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        }

        .user-dropdown {
            position: absolute;
            top: 50px;
            right: 0;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            display: none;
        }

        .user-dropdown.show {
            display: block;
        }

        .user-dropdown a {
            display: block;
            padding: 10px 15px;
            color: #333;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .user-dropdown a:hover {
            background-color: #f0f0f0;
        }
        .user-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: white;
            color: var(--primary-color);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .user-icon:hover {
            transform: scale(1.05);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
        }

        /* Main content */
        .main-content {
            flex: 1;
            padding: 20px;
        }

        /* Footer styles */
        .footer {
            background: #4fe992; /* Задаем фоновый цвет */
            color: white;
            text-align: center;
            padding: 10px 0;
            box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
        }

        /* Place card styles */
        .place-card {
            border: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
        }

        .place-card:hover {
            transform: translateY(-5px);
        }

        .place-card-img {
            height: 200px;
            object-fit: cover;
        }

        .place-card-body {
            padding: 15px;
        }

        .place-card-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }

        .place-card-text {
            color: #555;
        }

        .star-rating {
            color: gold;
        }

        /* Gradient button */
        .gradient-button {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .gradient-button:hover {
            background: linear-gradient(to right, #6eeea6, #3a9461); /* Darker gradient on hover */
        }

        /* Кнопки */
        .btn-primary {
            background-color: #4fe992; /* Зеленый цвет */
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: darken(#2E7D32, 10%); /* Темнее при наведении */
        }
        .btn-outline-light {
            color: #4fe992; /* Зеленый цвет */
            border-color: #4fe992;
            transition: background-color 0.3s ease;
        }
        .btn-outline-light:hover {
            background-color: #008000; /* Темно-зеленый цвет при наведении */
        }

        /* Стили для формы отзыва */
        .comment-form {
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .comment-form label {
            font-weight: 500;
        }

        .comment-form textarea {
            width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            resize: vertical;
        }

        .comment-form select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .comment-form .btn-success {
            background-color: #28a745; /* Зеленый цвет */
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .comment-form .btn-success:hover {
            background-color: darken(#28a745, 10%);
        }

        /* Стили для рейтинга */
        #rating-stars input {
            display: none; /* Скрываем радио-кнопки */
        }

        #rating-stars label.star {
            font-size: 24px;
            color: gray; /* Цвет неактивных звезд */
            cursor: pointer;
            margin-right: 5px;
            transition: color 0.3s ease;
        }

        #rating-stars input:checked ~ label.star,
        #rating-stars input:checked ~ label.star ~ label.star {
            color: gold; /* Цвет активных звезд */
        }
        
        .pagination {
            margin-top: 20px;
        }
        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }
        .pagination .page-link {
            color: var(--primary-color);
            transition: all 0.3s ease;
        }
        .pagination .page-link:hover {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
            color: white;
        }

    </style>
</head>

<body>
    <header class="header">
        <div class="container d-flex justify-content-between align-items-center">
            <!-- Логотип -->
            <a href="{% url 'places' %}" class="text-white text-decoration-none logo">
                My Guide
            </a>
            <!-- Поисковая строка -->
            <form method="get" action="{% url 'places' %}" id="search-form">
                <input type="text" name="q" placeholder="Поиск..." class="search-bar" id="search-input">
                <div id="search-results" class="search-results"></div>
            </form>

            <!-- Категории -->
            <div class="categories">
                <a href="{% url 'places' %}?category=cafe" class="category-link {% if current_category == 'cafe' %}active{% endif %}">
                    Кафе
                </a>
                <a href="{% url 'places' %}?category=restaurant" class="category-link {% if current_category == 'restaurant' %}active{% endif %}">
                    Рестораны
                </a>
            </div>
            
            <!-- Плашка пользователя -->
                        <!-- Плашка пользователя -->
            <div class="user-menu">
                {% if user.is_authenticated %}
                    <!-- Выпадающее меню для авторизованных пользователей -->
                    <div class="user-icon" id="userIcon">
                        <i class="mdi mdi-account-circle mdi-24px"></i>
                    </div>
                    <div id="userDropdown" class="user-dropdown">
                        <a href="{% url 'profile' %}">Профиль</a>
                        <a href="{% url 'logout' %}">Выход</a>
                    </div>
                {% else %}
                    <!-- Кнопка входа для неавторизованных пользователей -->
                    <div>
                        <a href="{% url 'login' %}" class="btn btn-outline-light">Войти</a>
                        <a href="{% url 'register' %}" class="btn btn-primary ms-2">Зарегистрироваться</a>
                    </div>
                {% endif %}
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            {% block content %}
            <!-- Content from other templates will be inserted here -->
            {% endblock %}
        </div>
    </main>

    <footer class="footer">
        &copy; 2025 Разработано на Django
    </footer>

    <!-- Подключение JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // === Логика для выпадающего меню пользователя ===
            const userIcon = document.getElementById('userIcon');
            const userDropdown = document.getElementById('userDropdown');
        
            if (userIcon && userDropdown) {
                // Открытие/закрытие выпадающего меню
                userIcon.addEventListener('click', () => {
                    userDropdown.classList.toggle('show'); // Добавляем/удаляем класс show
                });
        
                // Закрытие меню при клике вне его области
                document.addEventListener('click', (event) => {
                    if (!userIcon.contains(event.target) && !userDropdown.contains(event.target)) {
                        userDropdown.classList.remove('show'); // Скрываем меню
                    }
                });
            }
        
            // === Логика для поиска ===
            const searchInput = document.getElementById('search-input');
            const searchResults = document.getElementById('search-results');
        
            if (searchInput && searchResults) {
                // Отправка AJAX-запроса при изменении текста
                searchInput.addEventListener('input', () => {
                    const query = searchInput.value.trim();
                    if (query.length > 0) {
                        fetch(`/places/search/?q=${encodeURIComponent(query)}`)
                            .then(response => response.json())
                            .then(data => {
                                searchResults.innerHTML = ''; // Очищаем предыдущие результаты
                                if (data.length > 0) {
                                    data.forEach(place => {
                                        const link = document.createElement('a');
                                        link.href = `/places/${place.id}/`;
                                        link.textContent = place.title;
                                        searchResults.appendChild(link);
                                    });
                                    searchResults.style.display = 'block'; // Показываем результаты
                                } else {
                                    searchResults.style.display = 'none'; // Скрываем, если результатов нет
                                }
                            });
                    } else {
                        searchResults.style.display = 'none'; // Скрываем, если поле пустое
                    }
                });
        
                // Скрытие результатов при клике вне поля поиска
                document.addEventListener('click', (event) => {
                    if (!searchInput.contains(event.target) && !searchResults.contains(event.target)) {
                        searchResults.style.display = 'none';
                    }
                });
            }
        
            // === Логика для рейтинга звездочек ===
            const stars = document.querySelectorAll('#rating-stars label.star');
        
            stars.forEach((star, index) => {
                star.addEventListener('mouseover', () => {
                    stars.forEach((s, i) => {
                        s.style.color = i <= index ? 'gold' : 'gray';
                    });
                });
        
                star.addEventListener('mouseout', () => {
                    const selected = document.querySelector('#rating-stars input:checked');
                    if (!selected) {
                        stars.forEach((s) => (s.style.color = 'gray'));
                    } else {
                        const selectedIndex = Array.from(stars).indexOf(selected.nextElementSibling);
                        stars.forEach((s, i) => {
                            s.style.color = i <= selectedIndex ? 'gold' : 'gray';
                        });
                    }
                });
            });
        });
        </script>
</body>

</html>

C:\Users\User\Desktop\myguide\places\templates\places\add_review.html

<!DOCTYPE html>
<html>
<head>
    <title>Add Review for {{ place.title }}</title>
</head>
<body>
    <h1>Add Review for {{ place.title }}</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit Review</button>
    </form>
</body>
</html>

